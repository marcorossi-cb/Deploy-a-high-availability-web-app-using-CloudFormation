Description: >
    Marco Rossi / Udacity 2020

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    SourceIP:
      Description: Ip address to allow SSH access to the bastion host
      Type: String
      Default: 93.32.69.141/32

    S3BucketKeyName:
      Description: S3Bucket where ssh key is hosted
      Type: String
      Default: udacity-web-app-ha

    KeyBastionSSH:
      Description: KeyName to access bastion host
      Type: 'AWS::EC2::KeyPair::KeyName'
      Default: udacity-oregon-course

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          exec > >(tee /var/log/cloud-init-output.log|logger -t user-data -s 2>/dev/console) 2>&1
          sudo yum update -y
          sudo yum install unzip awscli -y
          sudo yum install httpd -y
          sudo service httpd start
          # sudo systemctl enable httpd.service
          cd /var/www/html
          # sudo rm /var/www/html/index.html
          # sudo aws s3 cp s3://${S3BucketKeyName}/udagram.zip /var/www/html
          # sudo unzip /var/www/html/udagram.zip -d /var/www/html
          aws s3 sync s3://udacity-web-app-ha /var/www/html
          sudo service httpd restart
      ImageId: ami-0a243dbef00e96192
      IamInstanceProfile: !Ref BastionIamInstanceProfile
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      KeyName: !Sub ${KeyBastionSSH}
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NET"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  ##############################
  BastionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  BastionIamPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: fullAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref BastionIamRole

  BastionIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref BastionIamRole

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to access to bastion host
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub ${SourceIP}

  Bastion1:
    Type: AWS::EC2::Instance
    DependsOn:
      - BastionSecurityGroup
      - BastionIamInstanceProfile
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install unzip awscli -y
          cd /home/ec2-user
          aws s3 cp s3://${S3BucketKeyName}/${KeyBastionSSH}.pem /home/ec2-user
          sudo chmod 400 ${KeyBastionSSH}.pem
          sudo chown root:root /home
          sudo chmod 755 /home
          sudo chown ec2-user:ec2-user /home/ec2-user -R
          sudo chmod 700 /home/ec2-user /home/ec2-user/.ssh
          sudo chmod 600 /home/ec2-user/.ssh/authorized_keys
      IamInstanceProfile: !Ref BastionIamInstanceProfile
      SecurityGroupIds:
        - Ref: BastionSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub '${EnvironmentName}-PUB1-SN'
      ImageId: ami-0a243dbef00e96192
      InstanceType: t3.small
      KeyName: !Sub ${KeyBastionSSH}

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'

  EIPAssociation1:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
      - Bastion1
      - EIP1
    Properties:
      InstanceId:
        Ref: Bastion1
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId

  Bastion2:
    Type: AWS::EC2::Instance
    DependsOn:
      - BastionSecurityGroup
      - BastionIamInstanceProfile
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install unzip awscli -y
          cd /home/ec2-user
          aws s3 cp s3://${S3BucketKeyName}/${KeyBastionSSH}.pem /home/ec2-user
          sudo chmod 400 ${KeyBastionSSH}.pem
          sudo chown root:root /home
          sudo chmod 755 /home
          sudo chown ec2-user:ec2-user /home/ec2-user -R
          sudo chmod 700 /home/ec2-user /home/ec2-user/.ssh
          sudo chmod 600 /home/ec2-user/.ssh/authorized_keys
      IamInstanceProfile: !Ref BastionIamInstanceProfile
      ImageId: ami-0a243dbef00e96192
      InstanceType: t3.small
      KeyName: !Sub ${KeyBastionSSH}
      SecurityGroupIds:
        - Ref: BastionSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub '${EnvironmentName}-PUB2-SN'

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'

  EIPAssociation2:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
      - Bastion2
      - EIP2
    Properties:
      InstanceId:
        Ref: Bastion2
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
  ##############################

Outputs:

  LoadBalancerDNS:
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    Export:
      Name: "DNS-URL" 

  CIDRBastion1:
    Description: The CIDR of Bastion Host 1
    Value: !Join ['', [!GetAtt Bastion1.PrivateIp, !Sub '/32']]
    Export:
      Name: !Sub ${EnvironmentName}-BASTION1-CIDR

  CIDRBastion2:
    Description: The CIDR to the Bastion Host 2
    Value: !Join ['', [!GetAtt Bastion2.PrivateIp, !Sub '/32']]
    Export:
      Name: !Sub ${EnvironmentName}-BASTION2-CIDR

  KeyBastionSSH:
    Description: SSH Key Name
    Value: !Sub ${KeyBastionSSH}
    Export:
      Name: !Sub ${EnvironmentName}-BASTION-KEYNAME